name: Merge sobre Main.
on:
  workflow_run:
    workflows: ["Merge sobre Develop."]
    types:
      - completed
jobs:
  validar_develop:
    name: Validar Develop Branch
    runs-on: ubuntu-latest
    outputs:
      correcto: ${{ steps.log.outputs.respuesta }}
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v2
        with:
          ref: 'develop'
          fetch-depth: 0
      - name: Setup user git
        run: |
          git config user.name "cparadac"
          git config user.email "c.paradac@uniandes.edu.co"
      - name: Save log
        id: log
        run: echo "::set-output name=respuesta::$(git log --pretty=format:%s -1)"
      - name: Echo Log.Respuesta
        run: echo "${{ steps.log.outputs.respuesta  }}"

  create_and_push_relase_branch:
    name: Push and Rebase on Branch
    needs: validar_develop
    if: ${{ contains(needs.validar_develop.outputs.correcto, '[Release]') }}
    runs-on: ubuntu-latest
    outputs:
      salida: ${{ steps.resultado_pruebas_exitoso.outputs.respuesta }}
      version: ${{ steps.version_detalle.outputs.respuesta }}
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v2
        with:
          ref: 'develop'
          fetch-depth: 0
      - name: Setup user git
        run: |
          git config user.name "cparadac"
          git config user.email "c.paradac@uniandes.edu.co"
      - name: Obtener version para rama nombre de rama release.
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          DRY_RUN: true
      - name: version detalle
        id: version_detalle
        run: |
          echo "Nuevo Tag: ${{ steps.taggerDryRun.outputs.new_tag }}"
          echo "Tag Actual: ${{ steps.taggerDryRun.outputs.tag }}"
          echo "Incremento Version: ${{ steps.taggerDryRun.outputs.part }}"
          echo "::set-output name=respuesta::${{ steps.taggerDryRun.outputs.new_tag }}"
      - name: Crear rama release
        run: |
          git checkout -b release/v${{ steps.taggerDryRun.outputs.new_tag }}
          git push -f -u origin release/v${{ steps.taggerDryRun.outputs.new_tag }}
      - name: Configuración de entorno de python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Instalación de librerías y dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Correr pruebas
        id: correr-pruebas
        run: python -m unittest discover -s tests -v
      - name: Validar resultado con errores
        if: ${{ failure() }}
        run: echo "Una o varias pruebas fallaron"
      - name: Validar resultado sin errores
        id: resultado_pruebas_exitoso
        if: ${{ success() }}
        run: echo "::set-output name=respuesta::Exito"
      - name: Cálculo de cubrimiento
        id: cubrimiento
        run: |
          coverage run -m unittest discover -s tests -v
          coverage report -m

  merge_on_main:
    name: Merge on Main
    needs: create_and_push_relase_branch
    if: ${{ needs.create_and_push_relase_branch.outputs.salida == 'Exito' }}
    runs-on: ubuntu-latest
    steps:
      - name: Mezcla release/v${{ needs.create_and_push_relase_branch.outputs.version }} -> main
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: release/v${{ needs.create_and_push_relase_branch.outputs.version }}
          target-branch: main
      - name: Checkout de repositorio
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup user git
        run: |
          git config user.name "cparadac"
          git config user.email "c.paradac@uniandes.edu.co"
      - name: Crear tag sobre Main
        run: |
          git fetch
          git checkout main
          git branch --show-current
          git pull
          git tag v${{ needs.create_and_push_relase_branch.outputs.version }} HEAD -m "Version ${{ needs.create_and_push_relase_branch.outputs.version }} released"
          git push origin v${{ needs.create_and_push_relase_branch.outputs.version }}